{
  "caliper": {
    "blockchain": "fabric"
  },
{% set orderer_domain = fabric_orderer_address.split(".")[1] %}
  "fabric": {
    "cryptodir": "{{ crpto_config_dir }}",
    "network": {
      "orderer": {
        "url": "grpcs://{{ fabric_orderer_address }}:{{ orderer_node_port }}",
        "domain": "{{ orderer_domain }}",
        "mspid": "{{ orderer_domain|capitalize }}MSP",
        "msp": "{{ crpto_config_dir }}/ordererOrganizations/{{ orderer_domain }}/msp/",
        "server-hostname": "{{ fabric_orderer_address }}",
        "tls_cacerts": "{{ crpto_config_dir }}/ordererOrganizations/{{ orderer_domain }}/orderers/{{ fabric_orderer_address }}/tls/ca.crt"
      },
{% for i in range(fabric_num_orgs|int) %}
{% set org_num = loop.index|string %}
      "org{{ org_num }}": {
        "name": "org{{ org_num }}",
        "domain": "org{{ org_num }}",
        "mspid": "Org{{ org_num }}MSP",
        "msp": "{{ crpto_config_dir }}/peerOrganizations/org{{ org_num }}/msp/",
        "ca": {
          "url": "http://ca.org{{ org_num }}:{{ node_port_mapping['ca.org' + org_num]['7054'] }}",
          "name": "ca"
        },
{% for j in range(fabric_peers_per_org|int) %}
{% set peer_num = loop.index0|string %}
        "peer{{ peer_num }}": {
          "requests": "grpcs://peer{{ peer_num }}.org{{ org_num }}:{{ node_port_mapping['peer' + peer_num + '.org' + org_num]['7051'] }}",
          "events": "grpcs://peer{{ peer_num }}.org{{ org_num }}:{{ node_port_mapping['peer' + peer_num + '.org' + org_num]['7053'] }}",
          "server-hostname": "peer{{ peer_num }}.org{{ org_num }}",
          "tls_cacerts": "{{ crpto_config_dir }}/peerOrganizations/org{{ org_num }}/peers/peer0.org{{ org_num }}/tls/ca.crt"
        }{% if not loop.last %},{% endif %}
{% endfor %}
      }{% if not loop.last %},{% endif %}
{% endfor %}
    },
    "channel": [
      {
        "name": "{{ channel_name }}",
        "deployed": true,
        "config": "{{ channel_artifacts_dir }}/channel.tx",
        "organizations": [
{% for i in range(fabric_num_orgs|int) %}
          "org{{ loop.index }}"{% if not loop.last %},{% endif %}
{% endfor %}
        ]
      }
    ],
    "chaincodes": {{ metrics_chaincodes | to_json }},
    "endorsement-policy": {
      "identities": [
{% for i in range(fabric_num_orgs|int) %}
        {
          "role": {
            "name": "member",
            "mspId": "Org{{ loop.index }}MSP"
          }
        }{% if not loop.last %},{% endif %}
{% endfor %}
      ],
      "policy": { "{{ fabric_num_orgs }}-of": [{% for i in range(fabric_num_orgs|int) %}{"signed-by": {{ loop.index0 }}}{% if not loop.last %},{% endif %} {% endfor %}]}
    },
{% if metrics_tx_context %}
    "context": {{ metrics_tx_context | to_json }}
{% endif %}
  },
  "info": {
    "Version": "{{ fabric_version }}",
    "Distribution": "Kubernetes",
    "Peer": "Orgs: {{ fabric_num_orgs }}, Peers per org:{{ fabric_peers_per_org }}"
    "StateDB: "{{ fabric_state_db }}"
    "Orderer": "Orgs: 1, Orderers: {{ fabric_num_orderer }}"
    "Orderer Consensus": "{{ fabric_num_orderer }}",
    "Orderer Address": "{{ fabric_orderer_address }}",
{% if fabric_orderer_type == "kafka" %}
    "Kafka Cluster": "{{ fabric_num_kafka }} kafka with {{ fabric_num_zookeeper }} zookeeper pods",
{% endif %}
    "details": "Fabric version {{ fabric_version }} on Kubernetes. Each Organisation is mapped to a Kubernetes namespace."
  }
}